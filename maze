######################################
#           サンプル迷路              #
######################################
#     以下を任意の迷路に替える。       #
#       壁は9,通路は0で表す。         #
#          外側は9で囲む。            #
######################################

maze=[
    [9,9,9,9,9,9,9,9,9,9,9,9,9],
    [9,0,0,0,0,9,9,9,9,9,1,0,9],
    [9,9,0,9,0,9,0,0,0,9,9,0,9],
    [9,9,0,9,0,9,0,9,0,0,9,0,9],
    [9,0,0,0,9,0,0,0,9,9,0,0,9],
    [9,0,9,0,9,0,9,9,0,0,0,9,9],
    [9,0,9,0,0,0,0,9,9,9,0,0,9],
    [9,0,0,9,0,0,9,9,0,0,0,0,9],
    [9,9,0,0,9,0,9,0,0,9,9,0,9],
    [9,0,0,9,0,0,0,0,9,0,0,0,9],
    [9,0,9,0,0,9,9,0,0,9,9,9,9],
    [9,0,0,9,0,0,0,9,0,0,0,0,9],
    [9,9,9,9,9,9,9,9,9,9,9,9,9]]

#######################################
#######################################
#　出力では、正解ルートは1で表される　#
#######################################

route=[]
import pprint

print("maze")
pprint.pprint(maze)

def search(x,y,depth):

#地点1(ゴール）に到着したら終わり
    if maze[x][y]==1:
        maze[x][y]=1
        maze[1][1]=1
        for i in range(depth):
            maze[route[i][0]][route[i][1]]=1
        for j in range(len(maze[1])):
            for k in range(len(maze)):
                if maze[j][k]!=1:
                    maze[j][k]=9
        print("")
        print("solution")
        pprint.pprint(maze)
        print(str(depth)+"手")
        exit()

#通過済みの地点は2に
    maze[x][y]=2

#ルートをリストに保存
    route.append([1,1])
    route.insert(depth-1,[x,y])

#ガンガン行こうぜ
    if maze[x-1][y]<2:
        search(x-1,y,depth+1)
    if maze[x+1][y]<2:
        search(x+1,y,depth+1)
    if maze[x][y-1]<2:
        search(x,y-1,depth+1)
    if maze[x][y+1]<2:
        search(x,y+1,depth+1)



search(1,1,0)
